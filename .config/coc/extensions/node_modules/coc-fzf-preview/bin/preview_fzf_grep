#!/usr/bin/env python3

import sys
import subprocess
import shutil
import re
import os
import glob

bat_theme = (os.environ.get('FZF_PREVIEW_PREVIEW_BAT_THEME', 'ansi'))
vim_runtime_dir = (os.environ.get('VIMRUNTIME', ''))
help_root_dir = (os.environ.get('FZF_PREVIEW_PLUGIN_HELP_ROOT_DIR', ''))

GREP_OUTPUT_REGEX = re.compile(
    r'^(\s\s\s.+\s)?(\d+\s)?(?P<dev_icon>.\s\s)?(?P<file_name>[^:]+):(?P<line_num>\d+)(:(?P<col>\d+))?(:(?P<match>.*))?'
)
CLEAN_LINE_REGEX = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')


def is_installed(cmd):
    return shutil.which(cmd.split(' ')[0])


match = GREP_OUTPUT_REGEX.match(sys.argv[1])
if not match:
    print(
        "Cannot process the entry :(\n"
        "Please open an issue and describe what happened\n"
        "including information such as file name and g:fzf_preview_grep_cmd"
    )
    sys.exit(1)

file_name = match.group('file_name')

if not os.path.isfile(file_name):
    if vim_runtime_dir != '':
        help_file_list = glob.glob(f'{vim_runtime_dir}/doc/*')
    else:
        help_file_list = []

    if help_root_dir != '':
        help_file_list.extend(glob.glob(f'{os.path.expanduser(help_root_dir)}/**/doc/*', recursive=True))

    match_help_files = list(filter(lambda help_file: file_name in help_file, help_file_list))

    if len(match_help_files) > 0:
        file_name = match_help_files[0]
    else:
        sys.exit(1)

line_num = int(match.group('line_num'))

# Set preview window offset. See: https://github.com/junegunn/fzf/commit/0f9cb5590ec0a397143a7a4caf003a54885f4375
# start = max(line_num - 10, 1)
# last = line_num + 100

cats = [
    f'bat --highlight-line="{line_num}" --color=always --theme="{bat_theme}" --plain',
    'cat'
]
cat = list(filter(is_installed, cats))[0]

seds = [
    'gsed',
    'sed'
]
sed = list(filter(is_installed, seds))[0]

result = subprocess.check_output(
    f'{cat} {file_name}', shell=True)

for index, line in enumerate(result.decode().split("\n")):
    if cat == 'cat' and int(line_num) - 1 == index:
        line = CLEAN_LINE_REGEX.sub('', line)
        print(f"\033[1m\033[4m\033[31m{line}\033[0m")
    else:
        print(line)
